#include <stdio.h>
#include <stdlib.h>
#include <string.h>



struct avl
{
    int data;
    struct avl* left;
    struct avl* right;
    int height;

};


int height(struct avl* node)
{
    if(node = NULL)
    {
       return 0;

    }
    else
    return node->height;
}

int max(int a, int b)
{
    if(a>b)
    {
        return a;
    }
    if(a<b)
    {
        return b;
    }
}

struct avl* new(int d)
{
    struct avl* new;
    new->data = d;
    new->left = NULL;
    new->right = NULL;
    new->height = 1;
    return(new);

}

struct avl* right_rotate(struct avl* node)
{
    struct avl* temp1 = node->right;
    struct avl* temp2 = temp1->left;


    //rotate
    temp1->right = node;
    node->left = temp2;

    temp1->height = max(((temp->left)->height),((temp->right)->height))+1;
    node->height = max(((node->left)->height),((node->right)->height))+1;

    return(node);

}



struct avl* left_rotate(struct avl* node)
{
    struct avl* temp1 = node->left;
    struct avl* temp2 = temp1->right;


    //rotate
    temp1->right = temp2;
    node->left = node;

    temp1->height = max((temp->left->height),((temp->right->height))+1;
    node->height = max((node->left->height),((node->right->height))+1;

    return(node);
    
}


int balance(struct avl* node)
[
    if(node == NULL)
    {
        return 0;
    }
    int f = node->left->height - node->right->height;
    return f;
]


struct avl* input(struct avl* node,int key)
{
    if(node == NULL)
    {
        return(new(key));
    }

    if(key>node->data)
    {
        node->left = input(node->left,key);
    }

    elif(key<node->data)
    {
        node->right = input(node->right,key);
    }

    else
    {
      return(node);
    }
    
    // chercking balance

    int b = balance(node);

    // left 
    if(b>1 && key > node->left->data)
    {
        return(right_rotate(node))
    }

    // right 

    if(b<-1 && key > node->right->data)
    {
        return(left_rotate(node))
    }

    // left 
 
    if(b>1 && key > node->left->data)
    {    
        node->left = left_rotate(node->left);
        return(right_rotate(node))
    }

      if(b<-1 && key > node->left->data)
    {    
        node->right = right_rotate(node->right)
        return(right_rotate(node))

    }
    

    return (node);
   
}
