#include <stdio.h>
#include <stdlib.h>
#include <string.h>



struct bst{
    int data;
    struct bst* left;
    struct bst* right;

};




//
struct bst* sorttree(int array[], int st, int end)
{
   if(st > end)
   {
    return NULL;
   }
   int mid = (st+end)/2;
   struct bst* head = (struct bst*)malloc(sizeof(struct bst));
    head->data = array[mid];
    head->left = NULL;
    head->right = NULL;

   head->left = sorttree(array,st, mid-1);
   head->right = sorttree(array,mid+1, end);

   return head;

}

void infix(struct bst* node)
{
  if(node == NULL)
  {
    return;
  }

  infix(node->left);
  printf("%d",node->data);
  infix(node->right);

}







//find the smallest node
struct bst* smallestnode(struct bst* f)
{
   
 struct bst* head = f;
   
    while (head->left != NULL)
        head = head->left;
 
    return head;
}


//deletes a node in the BST
struct bst* delete_node(struct bst* head, int li)
{
  if(head->data>li)
  {
     head->left =  delete_node(head->left,li);
  }
  else if(head->data<li)
  {
    head->right = delete_node(head->right,li);
  }
  
  else
  {
     if(head->left==NULL)
     {
      struct bst* holder = head->right;
      free(head);
      return holder;
     }
     if(head->right==NULL)
     {
      struct bst* holder = head->left;
      free(head);
      return holder;
     }
    
     struct bst* holder = smallestnode(head->right);
     head->data = holder->data;
     

     head->right = delete_node(head->right,holder->data);
  }

  return head;
  
}

int main()
{

int a[6]= {1,3,2,4,7,6};
int n = sizeof(a)/sizeof(a[0]);
struct bst* p = (struct bst*)malloc(sizeof(struct bst));
p = sorttree(a,0,n-1);
struct bst* r = elete_node(q,6);
infix(p);
return 0;

}



